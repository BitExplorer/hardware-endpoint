buildscript {
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "application"
    id "com.github.ben-manes.versions" version "0.34.0"
}

ext['micronautVersion'] = '2.1.2'
ext['jdbcTomcatVersion'] = '2.2.6'
ext['kotlinVersion'] = '1.4.10'
ext['postgresqlVersion'] = '42.2.18'
ext['gradleVersion'] = '6.7'
ext['jacksonVersion'] = '2.12.0-rc1'
ext['logbackVersion'] = '1.2.3'
ext['spockVersion'] = '2.0-M4-groovy-3.0'
ext['micronautSpockVersion'] = '2.2.1'
ext['micronautDataVersion'] = '2.1.1'
ext['micronautDataModelVersion'] = '1.1.0'
ext['jacksonVersion'] = '2.12.0-rc1'
ext['groovy.version'] = '${gradleVersion}'

//version "0.1"
//group "hardware"



//apply from: "test.gradle"

repositories {
    mavenCentral()
    jcenter()
    google()
    flatDir {
        dirs "libs"
    }
}

configurations {
    developmentOnly
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:${micronautVersion}"))
    kapt("io.micronaut:micronaut-inject-java:${micronautVersion}")
//    kapt("io.micronaut:micronaut-validation:${micronaut-validation}")
    implementation(platform("io.micronaut:micronaut-bom:${micronautVersion}"))
    implementation("io.micronaut:micronaut-inject:${micronautVersion}")
    implementation("io.micronaut:micronaut-validation:${micronautVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime:${micronautDataVersion}")
    implementation("io.micronaut:micronaut-runtime:${micronautVersion}")
    implementation("io.micronaut:micronaut-http-server-netty:${micronautVersion}")
    implementation("io.micronaut:micronaut-http-client:${micronautVersion}")
    implementation("io.micronaut.data:micronaut-data-model:${micronautDataModelVersion}")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:${micronautDataVersion}")
    kapt("io.micronaut.data:micronaut-data-processor:${micronautDataVersion}")
    implementation("io.micronaut.data:micronaut-data-jdbc:${micronautDataVersion}")
    runtime("io.micronaut.configuration:micronaut-jdbc-tomcat:${jdbcTomcatVersion}")
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")
    runtimeOnly("ch.qos.logback:logback-classic:${logbackVersion}")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    testImplementation("io.micronaut:micronaut-inject-groovy:${micronautVersion}")
    testImplementation("org.spockframework:spock-core:${spockVersion}") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock:${micronautSpockVersion}")
}

test.classpath += configurations.developmentOnly

mainClassName = "hardware.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
kapt {
    // arguments {
    //     arg("micronaut.processing.incremental", true)
    //     arg("micronaut.processing.annotations", "com.example.*")
    //     arg("micronaut.processing.group", "com.example")
    //     arg("micronaut.processing.module", "finance")
    // }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}
