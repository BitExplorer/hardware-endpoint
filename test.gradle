sourceSets {
    test {
        groovy.srcDir "src/test/unit/groovy"
        java.srcDir "src/test/unit/java"
        resources.srcDir "src/main/resources"


        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        groovy.srcDir "src/test/integration/groovy"
        java.srcDir "src/test/integration/java"
        resources.srcDir "src/main/resources"

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    functionalTest {
        groovy.srcDir "src/test/functional/groovy"
        java.srcDir "src/test/functional/java"
        resources.srcDir "src/main/resources"
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    performanceTest {
        groovy.srcDir "src/test/performance/groovy"
        java.srcDir "src/test/performance/java"
        resources.srcDir "src/main/resources"
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

//provide dependency scopes
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    performanceTestImplementation.extendsFrom testImplementation
    performanceRuntime.extendsFrom testRuntime
}

compileTestKotlin {
    //kotlinOptions.jvmTarget = "11"
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    testImplementation("io.micronaut:micronaut-inject-groovy:${micronautVersion}")
    testImplementation("org.spockframework:spock-core:${spockVersion}") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation("io.micronaut.test:micronaut-test-spock:${micronautSpockVersion}")
    testImplementation "org.apache.tomcat:tomcat-el-api:9.0.39"
    testImplementation "org.apache.tomcat:tomcat-jasper-el:9.0.39"
}

//provide dependency scopes
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom testImplementation
    testFunctionalCompile.extendsFrom testRuntime
}

test {
    afterSuite { suite, result ->
        result.exception?.printStackTrace()
    }
}

tasks.withType(Test) {
    //TODO: not used
    environment "INPUT_PATH", "excel_in"
    //systemProperties = System.properties

    useJUnitPlatform()
    testLogging.showStandardStreams = true

}

task integrationTest(type: Test) {
    description = "Runs the integration tests."
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
    description = "Runs the functional tests."
    testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
    classpath = project.sourceSets.functionalTest.runtimeClasspath
}

task performanceTest(type: Test) {
    description = "Runs the performance tests."
    testClassesDirs = project.sourceSets.performanceTest.output.classesDirs
    classpath = project.sourceSets.performanceTest.runtimeClasspath
}

integrationTest.reports.html.destination = file("$buildDir/reports/test/integration")
functionalTest.reports.html.destination = file("$buildDir/reports/test/functional")
performanceTest.reports.html.destination = file("$buildDir/reports/test/performance")
test.dependsOn functionalTest
